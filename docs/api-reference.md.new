# BMC AMI DevX Code Pipeline MCP Server - API Reference

This document provides comprehensive API reference for the FastMCP 2.x compliant server for BMC AMI DevX Code Pipeline operations.

## Overview

The server auto-generates MCP tools from the BMC AMI DevX Code Pipeline OpenAPI specification, providing standardized access to mainframe DevOps operations through the Model Context Protocol.

### Base Configuration

- **Server**: FastMCP 2.x with Streamable HTTP transport
- **Authentication**: JWT with FastMCP's built-in `JWTVerifier`
- **Base URL**: Configurable via `API_BASE_URL` environment variable
- **Health Check**: `GET /health`

## MCP Tools

All tools are auto-generated from the OpenAPI specification in `config/openapi.json`. Each tool corresponds to an operation in the BMC AMI DevX Code Pipeline API.

### Assignment Management

#### create_assignment

Creates a new mainframe development assignment.

**Parameters:**
```json
{
  "name": "string",           // Assignment name
  "description": "string",    // Assignment description
  "application": "string",    // Target application
  "stream": "string",         // Code stream
  "subAppl": "string",        // Sub-application (optional)
  "level": "string"           // Assignment level (DEV, QA, PROD)
}
```

**Returns:**
```json
{
  "assignmentId": "string",
  "name": "string",
  "status": "string",
  "created": "datetime",
  "owner": "string"
}
```

#### list_assignments

Lists assignments for the authenticated user.

**Parameters:**
```json
{
  "application": "string",    // Filter by application (optional)
  "status": "string",         // Filter by status (optional)
  "owner": "string",          // Filter by owner (optional)
  "limit": "integer",         // Results limit (default: 50)
  "offset": "integer"         // Pagination offset (default: 0)
}
```

**Returns:**
```json
{
  "assignments": [
    {
      "assignmentId": "string",
      "name": "string",
      "status": "string",
      "application": "string",
      "created": "datetime",
      "modified": "datetime"
    }
  ],
  "total": "integer",
  "limit": "integer",
  "offset": "integer"
}
```

#### get_assignment_details

Retrieves detailed information about a specific assignment.

**Parameters:**
```json
{
  "assignmentId": "string"    // Assignment identifier
}
```

**Returns:**
```json
{
  "assignmentId": "string",
  "name": "string",
  "description": "string",
  "status": "string",
  "application": "string",
  "stream": "string",
  "level": "string",
  "owner": "string",
  "created": "datetime",
  "modified": "datetime",
  "programs": [
    {
      "programName": "string",
      "type": "string",
      "status": "string",
      "lastModified": "datetime"
    }
  ]
}
```

#### update_assignment_status

Updates the status of an assignment.

**Parameters:**
```json
{
  "assignmentId": "string",   // Assignment identifier
  "status": "string",         // New status (OPEN, CLOSED, COMPLETE)
  "comments": "string"        // Status change comments (optional)
}
```

**Returns:**
```json
{
  "assignmentId": "string",
  "status": "string",
  "modified": "datetime",
  "modifiedBy": "string"
}
```

### Release Management

#### create_release

Creates a new release for deployment.

**Parameters:**
```json
{
  "releaseName": "string",    // Release name
  "application": "string",    // Target application
  "assignments": ["string"],  // Assignment IDs to include
  "level": "string",          // Target level (QA, PROD)
  "description": "string"     // Release description (optional)
}
```

**Returns:**
```json
{
  "releaseId": "string",
  "releaseName": "string",
  "status": "string",
  "created": "datetime",
  "owner": "string"
}
```

#### promote_release

Promotes a release through lifecycle stages.

**Parameters:**
```json
{
  "releaseId": "string",      // Release identifier
  "targetLevel": "string",    // Target level (QA, PROD)
  "override": "boolean"       // Override approvals (optional)
}
```

**Returns:**
```json
{
  "releaseId": "string",
  "status": "string",
  "targetLevel": "string",
  "promotionId": "string",
  "started": "datetime"
}
```

#### list_releases

Lists available releases with filtering options.

**Parameters:**
```json
{
  "application": "string",    // Filter by application (optional)
  "status": "string",         // Filter by status (optional)
  "level": "string",          // Filter by level (optional)
  "limit": "integer",         // Results limit (default: 50)
  "offset": "integer"         // Pagination offset (default: 0)
}
```

**Returns:**
```json
{
  "releases": [
    {
      "releaseId": "string",
      "releaseName": "string",
      "status": "string",
      "level": "string",
      "created": "datetime"
    }
  ],
  "total": "integer"
}
```

#### get_release_status

Retrieves detailed status information for a release.

**Parameters:**
```json
{
  "releaseId": "string"       // Release identifier
}
```

**Returns:**
```json
{
  "releaseId": "string",
  "releaseName": "string",
  "status": "string",
  "currentLevel": "string",
  "assignments": [
    {
      "assignmentId": "string",
      "name": "string",
      "status": "string"
    }
  ],
  "deployments": [
    {
      "deploymentId": "string",
      "level": "string",
      "status": "string",
      "started": "datetime",
      "completed": "datetime"
    }
  ]
}
```

### Source Code Management

#### list_programs

Lists programs in an assignment or release.

**Parameters:**
```json
{
  "assignmentId": "string",   // Assignment ID (optional)
  "releaseId": "string",      // Release ID (optional)
  "type": "string",           // Program type filter (COBOL, PLI, JCL)
  "status": "string"          // Status filter (optional)
}
```

**Returns:**
```json
{
  "programs": [
    {
      "programName": "string",
      "type": "string",
      "status": "string",
      "lastModified": "datetime",
      "size": "integer",
      "checksum": "string"
    }
  ]
}
```

#### get_program_content

Retrieves source code content for a program.

**Parameters:**
```json
{
  "programName": "string",    // Program name
  "assignmentId": "string",   // Assignment context
  "version": "string"         // Version (optional, latest if not specified)
}
```

**Returns:**
```json
{
  "programName": "string",
  "type": "string",
  "content": "string",
  "encoding": "string",
  "version": "string",
  "lastModified": "datetime",
  "checksum": "string",
  "metadata": {
    "lines": "integer",
    "size": "integer",
    "author": "string"
  }
}
```

#### update_program

Updates source code for a program.

**Parameters:**
```json
{
  "programName": "string",    // Program name
  "assignmentId": "string",   // Assignment context
  "content": "string",        // New source code content
  "comments": "string"        // Change comments
}
```

**Returns:**
```json
{
  "programName": "string",
  "version": "string",
  "status": "string",
  "modified": "datetime",
  "checksum": "string"
}
```

#### generate_program

AI-assisted code generation for mainframe programs.

**Parameters:**
```json
{
  "programName": "string",    // Program name
  "type": "string",           // Program type (COBOL, PLI, JCL)
  "assignmentId": "string",   // Assignment context
  "requirements": "string",   // Generation requirements
  "template": "string",       // Base template (optional)
  "copybooks": ["string"]     // Required copybooks (optional)
}
```

**Returns:**
```json
{
  "programName": "string",
  "type": "string",
  "content": "string",
  "generated": "datetime",
  "requirements": "string",
  "metadata": {
    "lines": "integer",
    "complexity": "string",
    "dependencies": ["string"]
  }
}
```

### Build and Deployment Operations

#### trigger_build

Initiates a build for an assignment or release.

**Parameters:**
```json
{
  "assignmentId": "string",   // Assignment ID (optional)
  "releaseId": "string",      // Release ID (optional)
  "buildType": "string",      // Build type (COMPILE, LINK, FULL)
  "programs": ["string"]      // Specific programs (optional)
}
```

**Returns:**
```json
{
  "buildId": "string",
  "status": "string",
  "started": "datetime",
  "estimatedDuration": "integer",
  "programs": ["string"]
}
```

#### get_build_status

Monitors build progress with real-time updates.

**Parameters:**
```json
{
  "buildId": "string"         // Build identifier
}
```

**Returns (Streaming):**
```json
{
  "buildId": "string",
  "status": "string",
  "progress": "integer",      // Percentage complete
  "currentStep": "string",
  "programs": [
    {
      "programName": "string",
      "status": "string",
      "messages": ["string"]
    }
  ],
  "logs": ["string"],
  "updated": "datetime"
}
```

#### deploy_application

Deploys application to mainframe environment.

**Parameters:**
```json
{
  "releaseId": "string",      // Release identifier
  "environment": "string",    // Target environment (QA, PROD)
  "deploymentType": "string", // Deployment type (NORMAL, EMERGENCY)
  "scheduleTime": "datetime"  // Scheduled deployment time (optional)
}
```

**Returns:**
```json
{
  "deploymentId": "string",
  "status": "string",
  "environment": "string",
  "scheduled": "datetime",
  "estimatedDuration": "integer"
}
```

#### get_deployment_status

Tracks deployment progress with real-time updates.

**Parameters:**
```json
{
  "deploymentId": "string"    // Deployment identifier
}
```

**Returns (Streaming):**
```json
{
  "deploymentId": "string",
  "status": "string",
  "progress": "integer",
  "currentPhase": "string",
  "phases": [
    {
      "name": "string",
      "status": "string",
      "started": "datetime",
      "completed": "datetime"
    }
  ],
  "logs": ["string"],
  "updated": "datetime"
}
```

## Authentication

### JWT Authentication

The server uses FastMCP's built-in JWT authentication:

```http
Authorization: Bearer <jwt-token>
```

**JWT Claims Required:**
- `iss`: Token issuer (configured in `FASTMCP_SERVER_AUTH_JWT_ISSUER`)
- `aud`: Audience claim (configured in `FASTMCP_SERVER_AUTH_JWT_AUDIENCE`)
- `exp`: Token expiration
- `sub`: Subject (user identifier)

### Environment Configuration

```bash
# JWT Authentication
FASTMCP_SERVER_AUTH=JWT
FASTMCP_SERVER_AUTH_JWT_JWKS_URI=https://auth.bmc.com/.well-known/jwks.json
FASTMCP_SERVER_AUTH_JWT_ISSUER=https://auth.bmc.com/
FASTMCP_SERVER_AUTH_JWT_AUDIENCE=bmc-ami-devx-code-pipeline
```

## Error Handling

### Standard Error Response

```json
{
  "error": {
    "code": "string",
    "message": "string",
    "details": "string",
    "timestamp": "datetime"
  }
}
```

### Common Error Codes

- `AUTH_REQUIRED`: Authentication required
- `AUTH_INVALID`: Invalid authentication token
- `AUTH_EXPIRED`: Token expired
- `FORBIDDEN`: Insufficient permissions
- `NOT_FOUND`: Resource not found
- `VALIDATION_ERROR`: Request validation failed
- `API_ERROR`: BMC AMI DevX API error
- `TIMEOUT`: Request timeout
- `RATE_LIMIT`: Rate limit exceeded

## Health Check

### Health Endpoint

```http
GET /health
```

**Response:**
```json
{
  "status": "healthy",
  "service": "BMC AMI DevX Code Pipeline MCP Server",
  "transport": "streamable-http",
  "authentication": "jwt",
  "features": ["openapi-tools", "streaming", "real-time"],
  "timestamp": "2025-08-05T12:00:00Z",
  "version": "2.2.0",
  "uptime": "3600"
}
```

## Rate Limiting

The server implements rate limiting to protect the BMC AMI DevX API:

- **Default Limit**: 100 requests per minute per user
- **Burst Limit**: 10 requests per second
- **Headers**: Rate limit information in response headers

```http
X-RateLimit-Limit: 100
X-RateLimit-Remaining: 95
X-RateLimit-Reset: 1691244000
```

## Streaming Responses

For long-running operations (builds, deployments), the server provides streaming responses:

```http
Content-Type: text/event-stream
Cache-Control: no-cache
Connection: keep-alive
```

Example streaming response:
```
data: {"status": "running", "progress": 25, "currentStep": "compiling"}

data: {"status": "running", "progress": 50, "currentStep": "linking"}

data: {"status": "completed", "progress": 100, "result": "success"}
```

This API reference provides comprehensive documentation for integrating with the BMC AMI DevX Code Pipeline MCP Server using FastMCP 2.x standards.
