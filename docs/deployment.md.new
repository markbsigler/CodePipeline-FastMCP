# BMC AMI DevX Code Pipeline MCP Server - Deployment Guide

This guide covers deploying the FastMCP 2.x compliant server for BMC AMI DevX Code Pipeline integration.

## Prerequisites

- Docker and Docker Compose
- Access to BMC AMI DevX Code Pipeline instance
- JWT authentication provider (for production)
- Python 3.11+ (for local development)

## Local Development

### Quick Setup

1. **Clone and Configure**
   ```bash
   git clone https://github.com/markbsigler/CodePipeline-FastMCP.git
   cd CodePipeline-FastMCP
   
   # Create virtual environment
   python3 -m venv .venv
   source .venv/bin/activate
   
   # Install dependencies
   pip install -r requirements.txt
   
   # Configure environment
   cp config/.env.example config/.env
   # Edit config/.env with your BMC AMI DevX settings
   ```

2. **Development Mode (No Authentication)**
   ```bash
   FASTMCP_SERVER_AUTH=NONE python main.py
   ```

3. **Production Mode (With JWT)**
   ```bash
   # Configure JWT settings in config/.env first
   python main.py
   ```

4. **Verify Deployment**
   ```bash
   curl http://localhost:8080/health
   ```

## Docker Deployment

### Local Docker

```bash
# Build and run with Docker Compose
docker-compose up --build

# Run in background
docker-compose up -d

# View logs
docker-compose logs -f fastmcp-server

# Stop services
docker-compose down
```

### Production Environment

Create production environment file:

```bash
# config/.env.production
HOST=0.0.0.0
PORT=8080
LOG_LEVEL=INFO

# BMC AMI DevX Code Pipeline API
API_BASE_URL=https://your-bmc-instance.com/code-pipeline/api/v1

# FastMCP JWT Authentication
FASTMCP_SERVER_AUTH=JWT
FASTMCP_SERVER_AUTH_JWT_JWKS_URI=https://your-auth-provider.com/.well-known/jwks.json
FASTMCP_SERVER_AUTH_JWT_ISSUER=https://your-auth-provider.com/
FASTMCP_SERVER_AUTH_JWT_AUDIENCE=bmc-ami-devx-code-pipeline

# BMC AMI DevX Specific Settings
BMC_AMI_DEVX_ENVIRONMENT=production
BMC_AMI_DEVX_TIMEOUT=30
BMC_AMI_DEVX_RETRY_ATTEMPTS=3
```

Deploy with production settings:

```bash
# Use production environment
docker run -d \
  --name fastmcp-code-pipeline \
  --restart unless-stopped \
  -p 8080:8080 \
  --env-file config/.env.production \
  -v $(pwd)/config:/app/config:ro \
  fastmcp-code-pipeline:latest
```

## Kubernetes Deployment

### 1. ConfigMap

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: fastmcp-config
  namespace: fastmcp
data:
  HOST: "0.0.0.0"
  PORT: "8080"
  LOG_LEVEL: "INFO"
  API_BASE_URL: "https://your-bmc-instance.com/code-pipeline/api/v1"
  FASTMCP_SERVER_AUTH: "JWT"
  BMC_AMI_DEVX_ENVIRONMENT: "production"
```

### 2. Secret

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: fastmcp-secrets
  namespace: fastmcp
type: Opaque
stringData:
  FASTMCP_SERVER_AUTH_JWT_JWKS_URI: "https://your-auth-provider.com/.well-known/jwks.json"
  FASTMCP_SERVER_AUTH_JWT_ISSUER: "https://your-auth-provider.com/"
  FASTMCP_SERVER_AUTH_JWT_AUDIENCE: "bmc-ami-devx-code-pipeline"
```

### 3. Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fastmcp-server
  namespace: fastmcp
spec:
  replicas: 3
  selector:
    matchLabels:
      app: fastmcp-server
  template:
    metadata:
      labels:
        app: fastmcp-server
    spec:
      containers:
      - name: fastmcp-server
        image: fastmcp-code-pipeline:latest
        ports:
        - containerPort: 8080
          name: http
        envFrom:
        - configMapRef:
            name: fastmcp-config
        - secretRef:
            name: fastmcp-secrets
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
```

### 4. Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: fastmcp-service
  namespace: fastmcp
spec:
  selector:
    app: fastmcp-server
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 8080
  type: ClusterIP
```

### 5. Ingress

```yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fastmcp-ingress
  namespace: fastmcp
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - fastmcp.your-domain.com
    secretName: fastmcp-tls
  rules:
  - host: fastmcp.your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fastmcp-service
            port:
              number: 80
```

## Monitoring and Health Checks

### Health Endpoint

The server provides a comprehensive health check:

```bash
curl http://localhost:8080/health
```

Expected response:
```json
{
  "status": "healthy",
  "service": "BMC AMI DevX Code Pipeline MCP Server",
  "transport": "streamable-http",
  "authentication": "jwt",
  "features": ["openapi-tools", "streaming", "real-time"],
  "timestamp": "2025-08-05T12:00:00Z"
}
```

### Monitoring Setup

1. **Prometheus Monitoring**
   ```yaml
   apiVersion: v1
   kind: ServiceMonitor
   metadata:
     name: fastmcp-monitor
   spec:
     selector:
       matchLabels:
         app: fastmcp-server
     endpoints:
     - port: http
       path: /health
       interval: 30s
   ```

2. **Grafana Dashboard**
   Monitor these key metrics:
   - Request rate and response times
   - Authentication success/failure rates
   - BMC AMI DevX API connectivity
   - Container resource utilization

## Security Configuration

### SSL/TLS Setup

1. **Using cert-manager in Kubernetes**
   ```yaml
   apiVersion: cert-manager.io/v1
   kind: ClusterIssuer
   metadata:
     name: letsencrypt-prod
   spec:
     acme:
       server: https://acme-v02.api.letsencrypt.org/directory
       email: admin@your-domain.com
       privateKeySecretRef:
         name: letsencrypt-prod
       solvers:
       - http01:
           ingress:
             class: nginx
   ```

2. **Network Policies**
   ```yaml
   apiVersion: networking.k8s.io/v1
   kind: NetworkPolicy
   metadata:
     name: fastmcp-netpol
   spec:
     podSelector:
       matchLabels:
         app: fastmcp-server
     policyTypes:
     - Ingress
     - Egress
     ingress:
     - from:
       - namespaceSelector:
           matchLabels:
             name: ingress-nginx
       ports:
       - protocol: TCP
         port: 8080
     egress:
     - to: []
       ports:
       - protocol: TCP
         port: 443  # HTTPS to BMC AMI DevX API
   ```

## Scaling and Performance

### Horizontal Pod Autoscaler

```yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fastmcp-hpa
  namespace: fastmcp
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fastmcp-server
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
```

### Performance Tuning

Adjust these settings based on your workload:

```bash
# BMC AMI DevX API settings
BMC_AMI_DEVX_TIMEOUT=30
BMC_AMI_DEVX_RETRY_ATTEMPTS=3
BMC_AMI_DEVX_MAX_CONCURRENT_REQUESTS=10

# FastMCP server settings
HOST=0.0.0.0
PORT=8080
LOG_LEVEL=INFO
```

## Troubleshooting

### Common Issues

1. **Authentication Failures**
   ```bash
   # Check JWT configuration
   curl -H "Authorization: Bearer invalid-token" http://localhost:8080/health
   
   # Verify JWKS URI accessibility
   curl https://your-auth-provider.com/.well-known/jwks.json
   ```

2. **BMC AMI DevX Connectivity**
   ```bash
   # Test API connectivity
   curl -H "Authorization: Bearer valid-token" \
        https://your-bmc-instance.com/code-pipeline/api/v1/assignments
   
   # Check DNS resolution
   nslookup your-bmc-instance.com
   ```

3. **Container Issues**
   ```bash
   # Check container logs
   docker logs fastmcp-code-pipeline-server
   
   # Verify container health
   docker inspect --format='{{json .State.Health}}' fastmcp-code-pipeline-server
   
   # Test from inside container
   docker exec -it fastmcp-code-pipeline-server curl http://localhost:8080/health
   ```

### Debug Mode

For troubleshooting, enable debug mode:

```bash
# Development mode with verbose logging
FASTMCP_SERVER_AUTH=NONE LOG_LEVEL=DEBUG python main.py
```

## Backup and Recovery

### Configuration Backup

```bash
#!/bin/bash
# backup-fastmcp.sh
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/backups/fastmcp-$DATE"

mkdir -p $BACKUP_DIR
cp -r config/ $BACKUP_DIR/
cp docker-compose.yml $BACKUP_DIR/
cp -r docs/ $BACKUP_DIR/

tar -czf "$BACKUP_DIR.tar.gz" $BACKUP_DIR
rm -rf $BACKUP_DIR

echo "Backup created: $BACKUP_DIR.tar.gz"
```

### Disaster Recovery

1. **Backup Schedule**
   ```bash
   # Add to crontab
   0 2 * * * /path/to/backup-fastmcp.sh
   ```

2. **Recovery Process**
   ```bash
   # Restore from backup
   tar -xzf backup.tar.gz
   cp -r backup/config/ config/
   docker-compose up -d
   
   # Verify health
   curl http://localhost:8080/health
   ```

## Maintenance

### Regular Tasks

1. **Update Dependencies**
   ```bash
   # Update FastMCP and dependencies
   pip install --upgrade fastmcp httpx python-dotenv
   
   # Rebuild Docker image
   docker-compose build --no-cache
   ```

2. **Security Updates**
   ```bash
   # Update base image
   docker pull python:3.11-slim
   
   # Scan for vulnerabilities
   docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
     aquasec/trivy image fastmcp-code-pipeline:latest
   ```

3. **Log Rotation**
   ```bash
   # Configure log rotation
   docker run --log-driver=json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              fastmcp-code-pipeline
   ```

### Monitoring Checklist

- [ ] Health endpoint responding (200 OK)
- [ ] JWT authentication working
- [ ] BMC AMI DevX API connectivity
- [ ] Container resource usage within limits
- [ ] No critical errors in logs
- [ ] SSL certificates not expired
- [ ] Backup process completed

This deployment guide ensures a secure, scalable, and maintainable deployment of the BMC AMI DevX Code Pipeline MCP Server using FastMCP 2.x standards.
