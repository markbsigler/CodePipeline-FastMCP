# FastMCP Server Generator Prompt

Create a complete FastMCP server implementation based on an OpenAPI/Swagger specification with the following requirements:

## Core Requirements

1. **FastMCP Server Configuration**
   - Use the latest FastMCP framework
   - Implement Streamable HTTP for real-time communication
   - Generate MCP tools from OpenAPI/Swagger JSON specification
   - Support for all HTTP methods (GET, POST, PUT, DELETE, PATCH)
   - Handle request/response schemas automatically from OpenAPI spec

2. **Authentication**
   - Implement Bearer Token authentication
   - Support for API key management
   - Secure token validation
   - Environment-based configuration for auth tokens

3. **Docker Configuration**
   - Multi-stage Docker build for optimization
   - Remote MCP server deployment ready
   - Health checks and proper logging
   - Environment variable configuration
   - Production-ready setup

4. **Repository Structure**
   - Complete Git repository with proper .gitignore
   - Comprehensive README with setup instructions
   - Include Mermaid diagrams for architecture
   - Documentation for deployment and usage
   - Example configurations and environment files

## Implementation Details

### Server Features
- Auto-generate MCP tools from OpenAPI paths and operations
- Parameter validation based on OpenAPI schemas
- Response transformation and error handling
- Support for path parameters, query parameters, and request bodies
- Proper HTTP status code handling
- Request/response logging and monitoring

### Authentication Implementation
- Bearer token middleware
- Token validation against configured secrets
- Support for multiple API keys if needed
- Secure header handling
- Authentication error responses

### Docker Setup
- Lightweight base image (Alpine or similar)
- Proper user permissions (non-root)
- Health check endpoints
- Volume mounts for configuration
- Environment variable injection
- Multi-architecture support (ARM64/AMD64)

## Required Files Structure

```
fastmcp-openapi-server/
├── README.md                    # Comprehensive documentation
├── Dockerfile                   # Multi-stage Docker build
├── docker-compose.yml          # Development setup
├── .dockerignore               # Docker ignore rules
├── .gitignore                  # Git ignore rules
├── package.json                # Node.js dependencies
├── src/
│   ├── server.js              # Main FastMCP server
│   ├── config/
│   │   ├── openapi.js         # OpenAPI spec loader
│   │   └── auth.js            # Authentication config
│   ├── middleware/
│   │   ├── auth.js            # Bearer token middleware
│   │   └── logging.js         # Request logging
│   ├── utils/
│   │   ├── openapi-parser.js  # OpenAPI to MCP tool converter
│   │   └── http-client.js     # HTTP request handler
│   └── tools/                 # Generated MCP tools
├── config/
│   ├── openapi.example.json   # Example OpenAPI spec
│   └── .env.example           # Environment variables template
├── docs/
│   ├── architecture.md        # Architecture documentation
│   ├── deployment.md          # Deployment guide
│   └── api-reference.md       # API reference
└── scripts/
    ├── setup.sh               # Setup script
    └── deploy.sh              # Deployment script
```

## README Requirements

The README must include:

1. **Project Overview**
   - Clear description of the FastMCP server
   - Features and capabilities
   - Use cases and benefits

2. **Architecture Diagrams (Mermaid)**
   - System architecture overview
   - Authentication flow
   - Request/response flow
   - Docker deployment architecture

3. **Quick Start Guide**
   - Prerequisites and dependencies
   - Environment setup
   - Docker installation and run commands
   - Basic configuration examples

4. **Configuration Documentation**
   - Environment variables reference
   - OpenAPI specification requirements
   - Authentication setup
   - Server configuration options

5. **Deployment Instructions**
   - Local development setup
   - Docker deployment
   - Production deployment considerations
   - Scaling and monitoring

6. **API Documentation**
   - Available MCP tools (auto-generated from OpenAPI)
   - Authentication requirements
   - Example requests and responses
   - Error handling

## Technical Specifications

### FastMCP Integration
- Use `@fastmcp/core` for server foundation
- Implement `@fastmcp/http` for streamable HTTP
- Leverage `@fastmcp/tools` for tool generation
- Follow FastMCP best practices for performance

### OpenAPI Processing
- Parse OpenAPI 3.0+ specifications
- Generate MCP tools for each endpoint
- Handle complex schemas and nested objects
- Support for file uploads and downloads
- Validate requests against OpenAPI schemas

### Authentication Flow
- Extract Bearer token from Authorization header
- Validate token against configured secrets
- Support for token expiration and refresh
- Secure error messages (no token leakage)
- Rate limiting and abuse prevention

### Docker Optimization
- Multi-stage build for smaller images
- Security best practices (non-root user)
- Proper signal handling for graceful shutdown
- Resource limits and health monitoring
- Development vs production configurations

## Example Usage

Provide examples for:
- Loading an OpenAPI specification
- Configuring authentication tokens
- Starting the server locally
- Running with Docker
- Connecting from MCP clients
- Making authenticated API calls

## Error Handling

Implement comprehensive error handling for:
- Invalid OpenAPI specifications
- Authentication failures
- Network connectivity issues
- API rate limiting
- Malformed requests
- Server errors and timeouts

## Security Considerations

- Secure token storage and validation
- Input sanitization and validation
- HTTPS enforcement in production
- CORS configuration
- Security headers implementation
- Audit logging for security events

Please generate a complete, production-ready FastMCP server implementation that meets all these requirements with clean, well-documented code and comprehensive setup instructions.
